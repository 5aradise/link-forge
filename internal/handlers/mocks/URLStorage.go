// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/5aradise/link-forge/internal/types"
)

// URLStorage is an autogenerated mock type for the URLStorage type
type URLStorage struct {
	mock.Mock
}

// CreateURL provides a mock function with given fields: ctx, alias, url
func (_m *URLStorage) CreateURL(ctx context.Context, alias string, url string) (types.URL, error) {
	ret := _m.Called(ctx, alias, url)

	if len(ret) == 0 {
		panic("no return value specified for CreateURL")
	}

	var r0 types.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (types.URL, error)); ok {
		return rf(ctx, alias, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) types.URL); ok {
		r0 = rf(ctx, alias, url)
	} else {
		r0 = ret.Get(0).(types.URL)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, alias, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteURLByAlias provides a mock function with given fields: ctx, alias
func (_m *URLStorage) DeleteURLByAlias(ctx context.Context, alias string) (types.URL, error) {
	ret := _m.Called(ctx, alias)

	if len(ret) == 0 {
		panic("no return value specified for DeleteURLByAlias")
	}

	var r0 types.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.URL, error)); ok {
		return rf(ctx, alias)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.URL); ok {
		r0 = rf(ctx, alias)
	} else {
		r0 = ret.Get(0).(types.URL)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetURLByAlias provides a mock function with given fields: ctx, alias
func (_m *URLStorage) GetURLByAlias(ctx context.Context, alias string) (types.URL, error) {
	ret := _m.Called(ctx, alias)

	if len(ret) == 0 {
		panic("no return value specified for GetURLByAlias")
	}

	var r0 types.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.URL, error)); ok {
		return rf(ctx, alias)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.URL); ok {
		r0 = rf(ctx, alias)
	} else {
		r0 = ret.Get(0).(types.URL)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListURLs provides a mock function with given fields: ctx
func (_m *URLStorage) ListURLs(ctx context.Context) ([]types.URL, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListURLs")
	}

	var r0 []types.URL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]types.URL, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []types.URL); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.URL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewURLStorage creates a new instance of URLStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewURLStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *URLStorage {
	mock := &URLStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
